<?xml version="1.0" encoding="UTF-8"?><mxfile modified="2021-08-17T12:17:47.006Z" host="design-inspector.a2z.com" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36" etag="eZs0ixzo3JSQYA8GQiSW" version="@DRAWIO-VERSION@" type="device"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="r8kXG6juIkPTl4mtjp8-I" name="system-architecture">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</diagram><diagram id="aU6BTgs75F_TfWd8WRl8k" name="construct-overview">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</diagram></mxfile>