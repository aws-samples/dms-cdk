<mxfile modified="2021-09-23T03:28:11.248Z" host="design-inspector.a2z.com" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36" etag="agSmX4O7qqb_Ew8ANNwp" version="@DRAWIO-VERSION@" type="device"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="r8kXG6juIkPTl4mtjp8-I" name="system-architecture">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</diagram><diagram id="aU6BTgs75F_TfWd8WRl8k" name="construct-overview">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</diagram></mxfile>